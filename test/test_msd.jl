@testset "integrator2" begin
    b = SystemBlockDefinition(:MSD)
    addParameter!(b, SymbolicValue{Float64}(:M))
    addParameter!(b, SymbolicValue{Float64}(:D))
    addParameter!(b, SymbolicValue{Float64}(:k))
    addParameter!(b, SymbolicValue{Float64}(:g), 9.8)

    in1 = InBlock(inport=InPort(:in1), outport=OutPort())
    addBlock!(b, in1)
    out1 = OutBlock(inport=InPort(), outport=OutPort(:out1))
    addBlock!(b, out1)
    constant1 = Constant(value=:(M*g), outport=OutPort())
    addBlock!(b, constant1)
    gain1 = Gain(K=:D, inport=InPort(), outport=OutPort())
    addBlock!(b, gain1)
    gain2 = Gain(K=:k, inport=InPort(), outport=OutPort())
    addBlock!(b, gain2)
    gain3 = Gain(K=:(1/M), inport=InPort(), outport=OutPort())
    addBlock!(b, gain3)
    int1 = Integrator(statein=InPort(:sin1), stateout=OutPort(:sout1), inport=InPort(), outport=OutPort())
    addBlock!(b, int1)
    int2 = Integrator(statein=InPort(:sin2), stateout=OutPort(:sout2), inport=InPort(), outport=OutPort())
    addBlock!(b, int2)
    add = Add(inports=[InPort(), InPort(), InPort(), InPort()], signs=[:+, :+, :-, :-], outport=OutPort())
    addBlock!(b, add)

    Line(in1.outport, add.inports[1])
    Line(constant1.outport, add.inports[2])
    Line(gain1.outport, add.inports[3])
    Line(gain2.outport, add.inports[4])
    Line(add.outport, gain3.inport)
    Line(gain3.outport, int1.inport)
    Line(int1.outport, int2.inport)
    Line(int1.outport, gain1.inport)
    Line(int2.outport, gain2.inport)
    Line(int2.outport, out1.inport)

    eval(expr_define_function(b))
    eval(expr_define_structure(b))
    eval(expr_define_next(b))
    eval(expr_define_expr(b))

    b = SystemBlockDefinition(:TestBlock3)
    addParameter!(b, SymbolicValue{Float64}(:M))
    addParameter!(b, SymbolicValue{Float64}(:D))
    addParameter!(b, SymbolicValue{Float64}(:k))
    addParameter!(b, SymbolicValue{Float64}(:f))
    addParameter!(b, SymbolicValue{Float64}(:p_cycle))
    addParameter!(b, SymbolicValue{Float64}(:p_width))

    msd = MSD(M=:M, D=:D, k=:k, in1=InPort(), out1=OutPort())
    addBlock!(b, msd)
    pulse = PulseGenerator(amplitude=:f, period=:p_cycle, pulsewidth=:p_width, phasedelay=10.0,
        timeport=InPort(), outport=OutPort())
    addBlock!(b, pulse)
    time = InBlock(inport=InPort(:time), outport=OutPort())
    addBlock!(b, time)
    scope1 = Scope(inport=InPort(), outport=OutPort(:F))
    addBlock!(b, scope1)
    scope2 = Scope(inport=InPort(), outport=OutPort(:x))
    addBlock!(b, scope2)

    Line(time.outport, pulse.timeport)
    Line(pulse.outport, msd.in1)
    Line(pulse.outport, scope1.inport)
    Line(msd.out1, scope2.inport)

    eval(expr_define_function(b))
    eval(expr_define_structure(b))
    eval(expr_define_next(b))
    eval(expr_define_expr(b))

    println(expr_define_function(b))
end